# script_generator.py 
# Generates a JS Stellarium script from a coordinates file.

import re
import sys

def generate_stellarium_script(
    input_file="coords_generated.txt",
    delay_before_screenshot=2,
    screenshot_format="png",
    output_file="stellarium_script.ssc"
):
    # --- Read coordinates from file ---
    with open(input_file, "r") as f:
        file_content = f.read()

    # --- Validate content ---
    if re.search(r"[^0-9\-\.\,\s]", file_content):
        raise ValueError(
            "The file contains invalid characters. Only numbers, commas, spaces, and newlines are allowed."
        )

    # Extract all numbers
    numbers = re.findall(r"-?\d+(?:\.\d+)?", file_content)
    numbers = [float(num) for num in numbers]

    if len(numbers) % 2 != 0:
        raise ValueError("The file must contain an even number of values (RA/Dec pairs).")

    coords = [(numbers[i], numbers[i+1]) for i in range(0, len(numbers), 2)]

    # --- Build Stellarium script ---
    script_header = """// Stellarium script generated by Python
// RA and Dec in degrees

var coords = [
"""
    coord_lines = [f"    {{ raDeg: {ra}, decDeg: {dec} }}" for ra, dec in coords]
    script_coords = ",\n".join(coord_lines)

    script_footer = f"""
];

var delayBeforeScreenshot = {delay_before_screenshot};
var screenshotFormat = "{screenshot_format}";

for (var i = 0; i < coords.length; i++) {{
    var ra = coords[i].raDeg;
    var dec = coords[i].decDeg;

    core.moveToRaDecJ2000(ra, dec);
    core.wait(delayBeforeScreenshot);

    var raClean = ra.toFixed(5).replace(".", "p");
    var decClean = dec.toFixed(5).replace(".", "p").replace("-", "m");
    var filename = "Stellarium_test_image_" + raClean + "_" + decClean + "." + screenshotFormat;

    core.screenshot(filename);
}}
"""

    with open(output_file, "w") as f:
        f.write(script_header)
        f.write(script_coords)
        f.write(script_footer)

    print(f"Stellarium script saved as {output_file}")
    return output_file, coords
